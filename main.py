import os
import datetime
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import requests
import wikipediaapi
from googletrans import Translator
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
translator = Translator()
wiki_wiki = wikipediaapi.Wikipedia(language='ru', user_agent='your_email@example.com')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.row("üìë –ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "üîé –í–∏–∫–∏–ø–µ–¥–∏—è", "üå§ –ü–æ–≥–æ–¥–∞", "üàπ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
menu_kb.row("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
menu_kb.row("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "üìú –ò—Å—Ç–æ—Ä–∏—è", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

# –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_kb = ReplyKeyboardMarkup(resize_keyboard=True)
stats_kb.row("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìú –ò—Å—Ç–æ—Ä–∏—è")
stats_kb.row("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
stats_kb.row("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –ú–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
favorites_kb = ReplyKeyboardMarkup(resize_keyboard=True)
favorites_kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
favorites_kb.row("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS query_history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  query_type TEXT,
                  query_text TEXT,
                  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS favorites
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  query_type TEXT,
                  query_text TEXT,
                  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS user_stats
                 (user_id INTEGER PRIMARY KEY,
                  username TEXT,
                  total_queries INTEGER DEFAULT 0,
                  wiki_queries INTEGER DEFAULT 0,
                  translate_queries INTEGER DEFAULT 0,
                  last_active DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_stats(user_id, username, query_type):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO user_stats 
                 (user_id, username, total_queries, wiki_queries, translate_queries, last_active)
                 VALUES (?, ?, COALESCE((SELECT total_queries + 1 FROM user_stats WHERE user_id = ?), 1),
                         COALESCE((SELECT wiki_queries + ? FROM user_stats WHERE user_id = ?), ?),
                         COALESCE((SELECT translate_queries + ? FROM user_stats WHERE user_id = ?), ?),
                         CURRENT_TIMESTAMP)''',
              (user_id, username, user_id, 1 if query_type == "wiki" else 0, user_id, 1 if query_type == "wiki" else 0,
               1 if query_type == "translate" else 0, user_id, 1 if query_type == "translate" else 0))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
def add_to_favorites(user_id, query_type, query_text):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('INSERT INTO favorites (user_id, query_type, query_text) VALUES (?, ?, ?)',
              (user_id, query_type, query_text))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def get_favorites(user_id):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('SELECT query_type, query_text, timestamp FROM favorites WHERE user_id = ? ORDER BY timestamp DESC',
              (user_id,))
    favorites = c.fetchall()
    conn.close()
    return favorites

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
def remove_from_favorites(user_id, query_text):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('DELETE FROM favorites WHERE user_id = ? AND query_text = ?', (user_id, query_text))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('SELECT * FROM user_stats WHERE user_id = ?', (user_id,))
    stats = c.fetchone()
    conn.close()
    return stats

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é save_query
def save_query(user_id, username, query_type, query_text):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('INSERT INTO query_history (user_id, username, query_type, query_text) VALUES (?, ?, ?, ?)',
              (user_id, username, query_type, query_text))
    conn.commit()
    conn.close()
    update_user_stats(user_id, username, query_type)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_statistics():
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('SELECT query_type, COUNT(*) FROM query_history GROUP BY query_type')
    stats = c.fetchall()
    conn.close()
    return stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history(user_id, limit=5):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('''SELECT query_type, query_text, timestamp 
                 FROM query_history 
                 WHERE user_id = ? 
                 ORDER BY timestamp DESC 
                 LIMIT ?''', (user_id, limit))
    history = c.fetchall()
    conn.close()
    return history

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def get_popular_queries(limit=5):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('''SELECT query_text, COUNT(*) as count 
                 FROM query_history 
                 GROUP BY query_text 
                 ORDER BY count DESC 
                 LIMIT ?''', (limit,))
    popular = c.fetchall()
    conn.close()
    return popular

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def clear_user_history(user_id):
    conn = sqlite3.connect('bot_database.db')
    c = conn.cursor()
    c.execute('DELETE FROM query_history WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=menu_kb)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = ("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                 "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
                 "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                 "/clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                 "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                 "/favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
                 "/add_favorite - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                 "/remove_favorite - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n"
                 "üìë –ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                 "üîé –í–∏–∫–∏–ø–µ–¥–∏—è - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
                 "üå§ –ü–æ–≥–æ–¥–∞ - –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑\n"
                 "üàπ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
                 "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
                 "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n"
                 "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –ó–∞–≥–ª—É—à–∫–∞")
    await message.answer(help_text)

# –ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
class ComplaintForm(StatesGroup):
    full_name = State()
    contact = State()
    complaint_text = State()
    confirm = State()

@dp.message_handler(lambda message: message.text == "üìë –ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def complaints_suggestions_start(message: types.Message, state: FSMContext):
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await ComplaintForm.full_name.set()

@dp.message_handler(state=ComplaintForm.full_name)
async def complaint_get_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ Telegram):")
    await ComplaintForm.contact.set()

@dp.message_handler(state=ComplaintForm.contact)
async def complaint_get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
    await ComplaintForm.complaint_text.set()

@dp.message_handler(state=ComplaintForm.complaint_text)
async def complaint_get_text(message: types.Message, state: FSMContext):
    await state.update_data(complaint_text=message.text)
    data = await state.get_data()
    confirmation_text = (f"üîπ –§–ò–û: {data['full_name']}\n"
                         f"üîπ –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
                         f"üîπ –¢–µ–∫—Å—Ç: {data['complaint_text']}\n\n"
                         "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ ‚ùå –æ—Ç–º–µ–Ω–∏—Ç–µ.")
    confirm_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_kb.row("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞")
    await message.answer(confirmation_text, reply_markup=confirm_kb)
    await ComplaintForm.confirm.set()

@dp.message_handler(lambda message: message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"], state=ComplaintForm.confirm)
async def complaint_confirm(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        admin_message = (f"üì© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
                         f"üë§ –§–ò–û: {data['full_name']}\n"
                         f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
                         f"üìù –¢–µ–∫—Å—Ç: {data['complaint_text']}")
        await bot.send_message(ADMIN_ID, admin_message)
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu_kb)
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu_kb)
    await state.finish()

# –í–∏–∫–∏–ø–µ–¥–∏—è
@dp.message_handler(lambda message: message.text == "üîé –í–∏–∫–∏–ø–µ–¥–∏—è")
async def wiki_search_start(message: types.Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏:")
    await state.set_state("wiki_search")

@dp.message_handler(state="wiki_search")
async def wiki_search(message: types.Message, state: FSMContext):
    page = wiki_wiki.page(message.text)
    if page.exists():
        save_query(message.from_user.id, message.from_user.username, "wiki", message.text)
        await message.answer(f"üìö {page.summary[:1000]}...")
    else:
        await message.answer("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.finish()

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
@dp.message_handler(lambda message: message.text == "üàπ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
async def translate_start(message: types.Message, state: FSMContext):
    await message.answer("üåç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:")
    await state.set_state("translate_text")

@dp.message_handler(state="translate_text")
async def translate_text(message: types.Message, state: FSMContext):
    text_to_translate = message.text.strip()
    translated = translator.translate(text_to_translate, dest='en')
    save_query(message.from_user.id, message.from_user.username, "translate", text_to_translate)
    await message.answer(f"üî† –ü–µ—Ä–µ–≤–æ–¥: {translated.text}")
    await state.finish()

# –ü–æ–≥–æ–¥–∞ (–∑–∞–≥–ª—É—à–∫–∞)
@dp.message_handler(lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def weather_start(message: types.Message, state: FSMContext):
    await message.answer("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state("weather_city")

@dp.message_handler(state="weather_city")
async def get_weather(message: types.Message, state: FSMContext):
    city = message.text
    weather_info = f"–ü–æ–≥–æ–¥–∞ –≤ {city}: –Ø—Å–Ω–æ, 6¬∞C"
    await message.answer(weather_info)
    await state.finish()

# –ö—É—Ä—Å –≤–∞–ª—é—Ç
@dp.message_handler(lambda message: message.text == "üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rate(message: types.Message):
    url = "https://api.exchangerate-api.com/v4/latest/USD"
    response = requests.get(url).json()
    rates = response.get("rates", {})
    
    if rates:
        uzs_rate = rates.get('UZS', 1)
        currency_list = [
            f"üíµ 1 USD = {round(rates.get('USD', 1) * uzs_rate, 2)} UZS",
            f"üí∂ 1 EUR = {round(rates.get('EUR', 1) * uzs_rate, 2)} UZS",
            f"üí∑ 1 GBP = {round(rates.get('GBP', 1) * uzs_rate, 2)} UZS",
            f"üí≥ 1 RUB = {round(rates.get('RUB', 1) * uzs_rate, 2)} UZS",
            f"üí¥ 1 UAH = {round(rates.get('UAH', 1) * uzs_rate, 2)} UZS"
        ]
        
        await message.answer("üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 1 UZS:\n" + "\n".join(currency_list))
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(lambda message: message.text == "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
async def get_datetime(message: types.Message):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await message.answer(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
@dp.message_handler(lambda message: message.text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")
async def random_number(message: types.Message):
    number = random.randint(1, 100)
    await message.answer(f"üé≤ –í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {number}")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
@dp.message_handler(lambda message: message.text == "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
async def location_placeholder(message: types.Message):
    await message.answer("üìç –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['history'])
async def show_history(message: types.Message):
    history = get_user_history(message.from_user.id)
    if history:
        history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        for query_type, query_text, timestamp in history:
            history_text += f"üîπ {query_type}: {query_text}\n"
            history_text += f"‚è∞ {timestamp}\n\n"
        await message.answer(history_text)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /popular - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['popular'])
async def show_popular(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        popular = get_popular_queries()
        popular_text = "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for query_text, count in popular:
            popular_text += f"üîπ {query_text}: {count} —Ä–∞–∑\n"
        await message.answer(popular_text)
    else:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /clear_history - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(commands=['clear_history'])
async def clear_history(message: types.Message):
    clear_user_history(message.from_user.id)
    await message.answer("üóë –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
@dp.message_handler(commands=['stats'])
async def show_personal_stats(message: types.Message):
    stats = get_user_stats(message.from_user.id)
    if stats:
        stats_text = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                     f"üë§ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[2]}\n"
                     f"üìö –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏: {stats[3]}\n"
                     f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {stats[4]}\n"
                     f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats[5]}")
        await message.answer(stats_text)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /favorites - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
@dp.message_handler(commands=['favorites'])
async def show_favorites(message: types.Message):
    favorites = get_favorites(message.from_user.id)
    if favorites:
        favorites_text = "‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for query_type, query_text, timestamp in favorites:
            favorites_text += f"üîπ {query_type}: {query_text}\n"
            favorites_text += f"‚è∞ {timestamp}\n\n"
        await message.answer(favorites_text)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /add_favorite - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.message_handler(commands=['add_favorite'])
async def add_favorite(message: types.Message, state: FSMContext):
    await message.answer("üíæ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:")
    await state.set_state("add_favorite")

@dp.message_handler(state="add_favorite")
async def process_add_favorite(message: types.Message, state: FSMContext):
    query_text = message.text.strip()
    add_to_favorites(message.from_user.id, "general", query_text)
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /remove_favorite - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.message_handler(commands=['remove_favorite'])
async def remove_favorite(message: types.Message, state: FSMContext):
    await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:")
    await state.set_state("remove_favorite")

@dp.message_handler(state="remove_favorite")
async def process_remove_favorite(message: types.Message, state: FSMContext):
    query_text = message.text.strip()
    remove_from_favorites(message.from_user.id, query_text)
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /admin_stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['admin_stats'])
async def show_admin_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()
        c.execute('SELECT username, total_queries, wiki_queries, translate_queries FROM user_stats')
        all_stats = c.fetchall()
        conn.close()
        
        if all_stats:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for username, total, wiki, translate in all_stats:
                stats_text += f"üë§ {username}:\n"
                stats_text += f"üìö –í—Å–µ–≥–æ: {total}\n"
                stats_text += f"üîç –í–∏–∫–∏–ø–µ–¥–∏—è: {wiki}\n"
                stats_text += f"üîÑ –ü–µ—Ä–µ–≤–æ–¥—ã: {translate}\n\n"
            await message.answer(stats_text)
        else:
            await message.answer("üìù –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_button(message: types.Message):
    stats = get_user_stats(message.from_user.id)
    if stats:
        stats_text = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                     f"üë§ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[2]}\n"
                     f"üìö –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏: {stats[3]}\n"
                     f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {stats[4]}\n"
                     f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats[5]}")
        await message.answer(stats_text, reply_markup=stats_kb)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=stats_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìú –ò—Å—Ç–æ—Ä–∏—è"
@dp.message_handler(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_button(message: types.Message):
    history = get_user_history(message.from_user.id)
    if history:
        history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        for query_type, query_text, timestamp in history:
            history_text += f"üîπ {query_type}: {query_text}\n"
            history_text += f"‚è∞ {timestamp}\n\n"
        await message.answer(history_text, reply_markup=stats_kb)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=stats_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
@dp.message_handler(lambda message: message.text == "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites_button(message: types.Message):
    favorites = get_favorites(message.from_user.id)
    if favorites:
        favorites_text = "‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for query_type, query_text, timestamp in favorites:
            favorites_text += f"üîπ {query_type}: {query_text}\n"
            favorites_text += f"‚è∞ {timestamp}\n\n"
        await message.answer(favorites_text, reply_markup=favorites_kb)
    else:
        await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.", reply_markup=favorites_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
@dp.message_handler(lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def clear_history_button(message: types.Message):
    clear_user_history(message.from_user.id)
    await message.answer("üóë –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞.", reply_markup=stats_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def add_favorite_button(message: types.Message, state: FSMContext):
    await message.answer("üíæ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", reply_markup=favorites_kb)
    await state.set_state("add_favorite")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
@dp.message_handler(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
async def remove_favorite_button(message: types.Message, state: FSMContext):
    await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", reply_markup=favorites_kb)
    await state.set_state("remove_favorite")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    try:
        raise exception
    except Exception as e:
        logger.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return True

if __name__ == '__main__':
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        from aiogram import executor
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
